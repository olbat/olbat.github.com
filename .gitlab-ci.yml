---  # used to build olbat.gitlab.io
stages:
- prepare
- build
- test
- publish
- deploy

build-docker-image: &docker-build
  stage: prepare
  image: docker
  services:
  - docker:dind
  script:
  - docker pull $(sed -n -e 's/^FROM[[:space:]]\+//p' Dockerfile)
  - docker build --no-cache -t $CI_REGISTRY_IMAGE .
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker push $CI_REGISTRY_IMAGE
  only:
    refs:
    - source
    changes:
    - Dockerfile
    - Gemfile
    - Gemfile.lock

build-docker-image-trigger:
  <<: *docker-build
  only:
  - schedules
  - triggers
  - web

build-site:
  stage: build
  image: $CI_REGISTRY_IMAGE
  variables:
    JEKYLL_ENV: production
  script: bundle exec rake -t build
  artifacts:
    paths:
    - _site
    expire_in: 1 hour
  except:
    refs:
    - master

test-site:
  stage: test
  image: $CI_REGISTRY_IMAGE
  script: bundle exec rake -t test EXT=0
  except:
    refs:
    - master

pages:
  # do not use the deploy stage to be sure that the pages:deploy job
  # that automatically publish the files is run after this one
  stage: publish
  image: $CI_REGISTRY_IMAGE
  script:
  # create the directory then copy the files to avoid a bug at deploy time
  # (see https://gitlab.com/gitlab-org/gitlab-ee/issues/1719)
  - mkdir public
  - shopt -s dotglob  # ensure that dotfiles are copied as well
  - mv _site/* public/
  # generate a custom -empty- 403 and 404 pages
  - touch public/403.html
  - touch public/404.html
  - find public  # for debugging purpose
  artifacts:
    paths:
    - public
  only:
    refs:
    - source

cdn-cache-flush:
  stage: deploy
  image: $CI_REGISTRY_IMAGE
  # FIXME: ugly workaround due to a bug related to the pages:deploy job
  # (see https://gitlab.com/gitlab-org/gitlab-ce/issues/33350)
  dependencies: []
  script: | # flush Cloudflare's cache
    curl --fail --request DELETE \
      --header "X-Auth-Email: ${CLOUDFLARE_USER}" \
      --header "X-Auth-Key: ${CLOUDFLARE_TOKEN}" \
      --header "Content-Type: application/json" \
      --data '{"purge_everything":true}' \
      "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONEID}/purge_cache"
  only:
    refs:
    - source
